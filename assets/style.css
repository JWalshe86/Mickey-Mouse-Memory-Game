*,
*::after,
*::before {
    margin: 0;
    padding: 0;
    /* padding not included in size  */
    box-sizing: border-box;

}

body {
    /* body will take 100% of available viewport space */
    height: 100vh;
    background-color: blue;
}

/* styling for landing page */

/* container for title */

.title-container {
    display: flex;
    justify-content: center;
    align-items: center;
    position: absolute;
    top: 20%;
    flex-wrap: wrap;
    flex-direction: column;
    align-content: center;
    text-align: center;
}

.heroTitle {
    /* centers the top of the text to the middle */
    position: relative;
    top: 20%;
    color: yellow;
    font-size: 350%;
    text-shadow: 2px 2px 10px yellow,
        15px 15px 10px black
}

/* styling for hero image title */
.hero-image {
    background-image: url(./images/test.jpg);
    background-size: cover;
    background-position: center;
    justify-content: center;
    height: 130vh;
    display: flex;
}

.buttons-container {
    display: flex;
    justify-content: space-evenly;
    align-items: center;
    top: 100%;
    position: absolute;
    height: 7vh;
    width: 100%;
}

/* styling of play & how to play buttons code adapted from GreatStack */

.howToPlay1,
.play-button {
    display: inline-block;
    padding: 24px 70px;
    background: #ff1876;
    color: #fff;
    border-radius: 40px;
    border: none;
    outline: none;
    cursor: pointer;
    position: relative;
    box-shadow: 0 2px 25px;
    /* put bubbles behind button */
    z-index: 2;
    min-width: fit-content;
}

/* creates 'bubbles' */
/* bubbles converted into stars using code adapted from [coding Artist](https: //www.youtube.com/watch?v=LZx_Hyudmdw) */
.howToPlay1 span,
.play-button span {
    width: 0;
    height: 0;
    border-bottom: 20px solid yellow;
    border-left: 13px solid transparent;
    border-right: 13px solid transparent;
    z-index: -1;
    position: absolute;
    display: block;
    /* so the bubbles will be invisible */
    transform: scale(0);
}

.howToPlay1 span::before,
.play-button span::before {

    position: absolute;
    content: '';
    width: 0;
    height: 0;
    border-top: 20px solid yellow;
    border-left: 13px solid transparent;
    border-right: 13px solid transparent;
    top: 7px;
    left: -13px;
    z-index: -1;

    /* so the bubbles will be invisible */
    /* transform: scale(0); */

}

.play-button span:nth-child(1),
.howToPlay1 span:nth-child(1) {
    top: -1000%;
    left: -1300%;
}

.play-button span:nth-child(2),
.howToPlay1 span:nth-child(2) {
    top: -1300%;
    left: 500%;
}

.play-button span:nth-child(3),
.howToPlay1 span:nth-child(3) {
    top: -50%;
    left: -1000%;
    background: transparent;
}

.play-button span:nth-child(4),
.howToPlay1 span:nth-child(4) {
    top: -1500%;
    left: -400%;
}

.play-button span:nth-child(5),
.howToPlay1 span:nth-child(5) {
    top: -90%;
    left: 28%;
}

.play-button span:nth-child(6),
.howToPlay1 span:nth-child(6) {
    top: -70%;
    left: -1000%;
}

.play-button span:nth-child(7),
.howToPlay1 span:nth-child(7) {
    top: -1200%;
    left: -1100%;
    background: transparent;
}

.play-button span:nth-child(8),
.howToPlay1 span:nth-child(8) {
    top: -2500%;
    left: -1200%;
}

.play-button span:nth-child(9),
.howToPlay1 span:nth-child(9) {
    top: -1000%;
    left: -600%;
}

.play-button span:nth-child(10),
.howToPlay1 span:nth-child(10) {
    top: -70%;
    left: 400%;
}

.play-button span:nth-child(11),
.howToPlay1 span:nth-child(11) {
    top: -600%;
    left: 600%;
    background: transparent;
}

.play-button span:nth-child(12),
.howToPlay1 span:nth-child(12) {
    top: -50%;
    left: 110%;
}

.play-button span:nth-child(13),
.howToPlay1 span:nth-child(13) {
    top: 40%;
    left: -200%;
}

.play-button span:nth-child(14),
.howToPlay1 span:nth-child(14) {
    top: 60%;
    left: 120%;
}

.play-button span:nth-child(15),
.howToPlay1 span:nth-child(15) {
    top: -2200%;
    left: -10%;
}

.play-button span:nth-child(16),
.howToPlay1 span:nth-child(16) {
    top: -2200%;
    left: 300%;
    background: transparent;
}

.play-button span:nth-child(17),
.howToPlay1 span:nth-child(17) {
    top: -1000%;
    left: 10%;
}

.play-button span:nth-child(18),
.howToPlay1 span:nth-child(18) {
    top: -300%;
    left: -1000%;
}

.play-button span:nth-child(19),
.howToPlay1 span:nth-child(19) {
    top: -4500%;
    left: 33%;
    background: transparent;
}

.play-button span:nth-child(20),
.howToPlay1 span:nth-child(20) {
    top: -1000%;
    left: 1000%;
}

.play-button span:nth-child(21),
.howToPlay1 span:nth-child(21) {
    top: -2500%;
    left: 1000%;
}

.play-button span:nth-child(22),
.howToPlay1 span:nth-child(22) {
    top: -2000%;
    left: 1000%;
    background-color: transparent;
}

.play-button span:nth-child(23),
.howToPlay1 span:nth-child(23) {
    top: -2000%;
    left: -1500%;
}


.play-button span:nth-child(24),
.howToPlay1 span:nth-child(24) {
    top: -3500%;
    left: -1000%;
}

/* forwards means it will stop the animation after one time running */
.anim {
    animation: moving 1s linear reverse forwards;
}

/* forwards means it will stop the animation after one time running */
.anim {
    animation: moving 2s linear reverse forwards;
}

@keyframes moving {
    50% {
        transform: scale(.5);
    }

    100% {
        transform: scale(1);
    }

    100% {
        top: 100%;
        left: 50%;
    }
}


.play-button {
    color: white;
    text-decoration: none;
}

/* styling for when the buttons are clicked */

.howToPlay1:active,
.play-button:active {
    background: #d80972;
    box-shadow: 0 2px 25px;
}

/* styling for game */
/* Code adapted from [Marina-Ferria](https: //www.youtube.com/watch?v=ZniVgo8U7ek) */

.card-container {
    /* set width for container */
    width: 70vw;
    height: 70vh;
    display: flex;
    /* introduce rows  */
    flex-wrap: wrap;
    /* to keep container in center */
    margin: auto;
    /* For 3D effect when card flipped.Perspective property gives depth to elements
     */
    perspective: 1000px;
}

/* styling for Reset button, timer and counter */
/* Code adapted from [Iris Smok](https: //github.com/Iris-Smok/Kids-Memory-Game_PP2/blob/main/index.html) */

.info-container {
    background-color: red;
    width: 100%;
    text-align: center;
    font-size: 2rem;
    display: flex;
    justify-content: center;
    gap: 2vh;
    flex-direction: column;
    align-items: center;
}


/* to keep timer & counter on same line & responsive to screen size */

.timer-counter-container {
    display: inline-flex;
    justify-content: space-between;
    gap: 50px;
}

/* game & info stay in same screen */

.info-game-container {
    display: flex;
    flex-direction: column;
    height: inherit;
}

.timer {
    background-color: yellow;
    float: right;
    padding-left: 3px;
}

.counter {
    background-color: pink;
    position: relative;
    display: inline-block;
    padding-left: 3px;
}

span.counter {
    padding-left: 1px;
}

#reset-container {
    width: 100%;
    text-align: center;
}



.memory-card {
    /* 4 cards @ 25% each for row, 3 cards @ 33% each for columns */
    /* The css calc function allows one to remove 
    the width of the margin from the width & height so that the cards fit into the container again 
    and the 3*4 structure is maintained */
    width: calc(25% - 10px);
    height: calc(33%-10px);
    /* gives the cards a position which the front and back cards can position themselves from */
    position: relative;
    margin: 5px;
    /* so the active card knows to start from 1 when transitioning */
    transform: scale(1);

    /* \Inserts memory card element inside 3D space created in card container*/
    transform-style: preserve-3d;
    /* evokes the action of the transform property */
    transition: transform.5s;

}

/* The card will decrease by .3 when active over .2s */
.memory-card:active {
    /* transform: scale(.97); */
    transition: transform .2s;
}

/* styling flip card both classes belong to the same element, so no spaces between names */
/* when the clip class is present rotate Y 180 degrees */
.memory-card.flip {
    transform: rotateY(180deg);
}

.card-front,
.card-back {
    /* images take whole width & height of container */
    width: 100%;
    height: 100%;
    /* places the front and back cards on top of one another */
    position: absolute;
    padding: 2%;
    border-radius: 5px;
    background-color: white;
    /*Every HTML element has a mirrored image of itself. The property backface-visibility 
     defaults to visible so one needs to put this to hidden before the front of the cards 
     can be shown when flipped*/
    backface-visibility: hidden;
    /* so image is sharp */
    object-fit: contain;
    cursor: pointer;
}

.card-front {
    /* front card rotated 180 degrees so it can be seen when filpcard is activated */
    transform: rotateY(180deg);
}

.card-front.front1 {
    transform: inherit;

}

/* styling for modal. Code adapted from WebDevSimplified */

.modal {
    position: fixed;
    /* centers the top of the text to the middle */
    top: 50%;
    left: 50%;
    /* change the position of the elements 
        50% here is 50% of the size of the container 
        not the entire screen like above
        Setting the scale to zero means it's invisible*/
    transform: translate(-50%, -50%) scale(0);
    /* scale allows for a smooth transition, as opposed to display: none */
    transition: 200ms ease-in-out;
    border: 1px solid black;
    border-radius: 10px;
    /* want modal to draw above everything else */
    z-index: 10;
    background-color: white;
    width: 500px;
    max-width: 80%;
}

.modal.active {
    transform: translate(-50%, -50%) scale(1);

}

.modal-header {
    padding: 10px 15px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid black;
}

.modal-header .title {
    font-size: 1.25rem;
    font-weight: bold;
}

.modal-header .close-button {
    cursor: pointer;
    border: none;
    outline: none;
    background: none;
    font-size: 1.25rem;
    font-weight: bold;
    color: black;
    box-shadow: none;
}

.modal-body {
    padding: 10px 15px;
}

#modal-overlay {
    position: fixed;
    /* so by default the modal doesn't display */
    opacity: 0;
    transition: 200ms ease-in-out;
    /* stretches overlay all over the screen */
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, .5);
    /* so the open modal button works when the overlay is not active */
    pointer-events: none;
}

/* so one can toggle between overlay being present of not */
#modal-overlay.active {
    pointer-events: all;
    opacity: 1;
}

.congratsModal-container {
    background: #3c5077;
    /* all contents in this container will be displayed in the center of the webpage */
    display: flex;
    align-items: center;
    justify-content: center;
}

.congratsModal-popup {
    width: 30vw;
    background: white;
    border-radius: 6px;
    position: absolute;
    top: 200%;
    left: 50%;
    /* to add zoom out effect */
    /* transform: translate(-50%, -50%) scale(0.1); */
    text-align: center;
    padding: 0 30px 30px;
    color: #333;
    /* visibility: hidden; */
    transition: transform 0.4s, top 0.4s;
}

.opencongratsModal-popup {
    visibility: visible;
    top: 180%;
    transform: translate(-50%, -50%) scale(1.1);
    z-index: 2;

}

.congratsModal-popup img {
    width: 100%;
    margin-top: -50px;
    border-radius: 50%;
    box-shadow: 0 2px 5px rgba(0, 0, 0, .2);
}

.congratsModal-popup button {
    width: 100%;
    margin-top: 50px;
    padding: 10px 0;
    background: #6fd649;
    outline: none;
    font-size: 18px;
    border-radius: 4px;
    cursor: pointer;
    box-shadow: 0 2px 5px rgba(0, 0, 0, .2);

}