*,
*::after,
*::before {
    margin: 0;
    padding: 0;
    /* padding not included in size  */
    box-sizing: border-box;

}

body {
    /* body will take 100% of available viewport space */
    height: 100vh;
    background-color: blue;
}

/* styling for landing page */

.hero-image {
    background-image: url(./images/test.jpg);
    background-size: cover;
    background-position: center;
    height: 130vh;
}


/* styling for game */
/* Code adapted from [Marina-Ferria](https: //www.youtube.com/watch?v=ZniVgo8U7ek) */

.card-container {
    /* set width for container */
    width: 640px;
    height: 640px;
    display: flex;
    /* introduce rows  */
    flex-wrap: wrap;
    /* to keep container in center */
    margin: auto;
    /* For 3D effect when card flipped.Perspective property gives depth to elements
     */
    perspective: 1000px;
}

/* styling for Reset button, timer and counter */
/* Code adapted from [Iris Smok](https: //github.com/Iris-Smok/Kids-Memory-Game_PP2/blob/main/index.html) */

.info-container {
    background-color: red;
    width: 100%;
    text-align: center;
    font-size: 2rem;
    display: flex;
    justify-content: center;
    gap: 2vh;
    flex-direction: column;
    align-items: center;
}


/* to keep timer & counter on same line & responsive to screen size */

.timer-counter-container {
    display: inline-flex;
    justify-content: space-between;
    gap: 50px;
}

/* game & info stay in same screen */

.info-game-container {
    display: flex;
    flex-direction: column;
    height: inherit;
}

.timer {
    background-color: yellow;
    float: right;
    padding-left: 3px;
}

.counter {
    background-color: pink;
    position: relative;
    display: inline-block;
    padding-left: 3px;
}

span.counter {
    padding-left: 1px;
}

#reset-container {
    width: 100%;
    text-align: center;
}



.memory-card {
    /* 4 cards @ 25% each for row, 3 cards @ 33% each for columns */
    /* The css calc function allows one to remove 
    the width of the margin from the width & height so that the cards fit into the container again 
    and the 3*4 structure is maintained */
    width: calc(25% - 10px);
    height: calc(33%-10px);
    /* gives the cards a position which the front and back cards can position themselves from */
    position: relative;
    margin: 5px;
    /* so the active card knows to start from 1 when transitioning */
    transform: scale(1);

    /* \Inserts memory card element inside 3D space created in card container*/
    transform-style: preserve-3d;
    /* evokes the action of the transform property */
    transition: transform.5s;
}

/* The card will decrease by .3 when active over .2s */
.memory-card:active {
    transform: scale(.97);
    transition: transform .2s;
}

/* styling flip card both classes belong to the same element, so no spaces between names */
/* when the clip class is present rotate Y 180 degrees */
.memory-card.flip {
    transform: rotateY(180deg);
}

.card-front,
.card-back {
    /* images take whole width & height of container */
    width: 100%;
    height: 100%;
    /* places the front and back cards on top of one another */
    position: absolute;
    padding: 20px;
    border-radius: 5px;
    background-color: white;
    /*Every HTML element has a mirrored image of itself. The property backface-visibility 
     defaults to visible so one needs to put this to hidden before the front of the cards 
     can be shown when flipped*/
    backface-visibility: hidden;
    /* so image is sharp */
    object-fit: contain;
}

.card-front {
    /*front card rotated 180 degrees so it can be seen when filpcard is activated */
    transform: rotateY(180deg);
}

/* styling for modal. Code adapted from WebDevSimplified */

.modal{
        position: fixed;
        /* centers the top of the text to the middle */
        top: 50%;
        left: 50%;
        /* change the position of the elements 
        50% here is 50% of the size of the container 
        not the entire screen like above*/
        transform: translate(-50%, -50%);
        border: 1px solid black;
        border-radius: 10px;
        /* want modal to draw above everything else */
        z-index: 10;
        background-color: white;
        width: 500px;
        max-width: 80%;
}

.modal-header{
    padding: 10px 15px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid black;
}

.modal-header .title {
    font-size: 1.25rem;
    font-weight: bold;
}

.modal-header .close-button{
    cursor: pointer;
    border: none;
    outline: none;
    background: none;
    font-size: 1.25rem;
    font-weight: bold;
}

.modal-body{
    padding: 10px 15px;
}

#modal-overlay {
    position: fixed;
    /* so by default the modal doesn't display */
    /* opacity: 0; */
    /* stretches overlay all over the screen */
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, .5);
}









